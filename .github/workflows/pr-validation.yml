name: üîç PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  TF_VERSION: "1.6.0"

jobs:
  # Fast validation for all PRs
  quick-checks:
    name: ‚ö° Quick Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux shellcheck

      - name: üìã Lint shell scripts
        run: |
          echo "üîç Linting shell scripts..."
          find . -name "*.sh" -type f | while read -r script; do
            echo "Checking: $script"
            shellcheck "$script" || echo "‚ö†Ô∏è ShellCheck issues in $script"
          done

      - name: ‚úÖ Validate syntax
        run: |
          echo "üîç Validating script syntax..."

          # Check main installer
          bash -n install.sh
          echo "‚úÖ install.sh syntax valid"

          # Check source scripts
          for script in src/*.sh; do
            if [ -f "$script" ]; then
              bash -n "$script"
              echo "‚úÖ $script syntax valid"
            fi
          done

          # Check test scripts
          for script in tests/scripts/*.sh; do
            if [ -f "$script" ]; then
              bash -n "$script"
              echo "‚úÖ $script syntax valid"
            fi
          done

      - name: üß™ Test tmux config
        run: |
          echo "üîç Testing tmux configuration..."
          tmux -f src/tmux.conf -C list-sessions 2>/dev/null || true
          echo "‚úÖ Tmux configuration is valid"

      - name: üèóÔ∏è Validate Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîç Terraform checks
        run: |
          cd tests/terraform
          echo "üîç Terraform init..."
          terraform init -backend=false

          echo "üîç Terraform validate..."
          terraform validate

          echo "üîç Terraform format check..."
          terraform fmt -check=true -diff=true

          echo "‚úÖ Terraform validation complete"

      - name: üìä PR Summary
        run: |
          echo "## ‚úÖ PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Shell Scripts**: All syntax checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Tmux Config**: Configuration validated" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform**: Infrastructure code validated" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Ready for review üöÄ" >> $GITHUB_STEP_SUMMARY

  # Security scan for PRs
  security-check:
    name: üîí Security Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: üõ°Ô∏è Terraform security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: tests/terraform
          framework: terraform
          output_format: cli
          soft_fail: true
          log_level: WARNING

  # Documentation checks
  docs-check:
    name: üìö Documentation Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4

      - name: üîç Check markdown files
        uses: DavidAnson/markdownlint-action@v1
        with:
          files: '**/*.md'
          config: |
            {
              "MD013": false,
              "MD033": false,
              "MD041": false
            }

      - name: üìã Validate README updates
        run: |
          if git diff --name-only origin/main...HEAD | grep -q "README.md"; then
            echo "üìù README.md was updated in this PR"
            echo "üìã Checking README structure..."

            # Check for required sections
            required_sections=("Features" "Quick Start" "Installation" "Usage")
            for section in "${required_sections[@]}"; do
              if grep -q "## .*$section" README.md; then
                echo "‚úÖ Found section: $section"
              else
                echo "‚ö†Ô∏è Missing section: $section"
              fi
            done
          else
            echo "üìù README.md not modified in this PR"
          fi

  # Changes analysis
  change-detection:
    name: üîç Change Analysis
    runs-on: ubuntu-latest
    outputs:
      needs_cloud_test: ${{ steps.changes.outputs.needs_cloud_test }}
      test_type: ${{ steps.changes.outputs.test_type }}

    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Detect changes
        id: changes
        run: |
          echo "üîç Analyzing changes in PR..."

          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Determine if cloud testing is needed
          NEEDS_CLOUD_TEST=false
          TEST_TYPE="quick"

          # Check for critical changes that need cloud testing
          if echo "$CHANGED_FILES" | grep -E "(src/|install\.sh|tests/terraform/|tests/configs/)"; then
            echo "üö® Critical files changed - cloud testing recommended"
            NEEDS_CLOUD_TEST=true
            TEST_TYPE="full"
          fi

          # Check for test-only changes
          if echo "$CHANGED_FILES" | grep -q "tests/scripts/" && ! echo "$CHANGED_FILES" | grep -v "tests/"; then
            echo "üß™ Test scripts changed - quick cloud test"
            NEEDS_CLOUD_TEST=true
            TEST_TYPE="quick"
          fi

          # Check PR labels for forced testing
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'test-cloud') }}" == "true" ]]; then
            echo "üè∑Ô∏è test-cloud label found - forcing cloud test"
            NEEDS_CLOUD_TEST=true
            TEST_TYPE="full"
          fi

          echo "needs_cloud_test=$NEEDS_CLOUD_TEST" >> $GITHUB_OUTPUT
          echo "test_type=$TEST_TYPE" >> $GITHUB_OUTPUT

          echo "## üìä Change Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Cloud Testing Needed**: $NEEDS_CLOUD_TEST" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Type**: $TEST_TYPE" >> $GITHUB_STEP_SUMMARY

  # DISABLED: Conditional cloud testing for PRs
  # TODO: Re-enable when cloud testing is ready
  # Currently using Docker-based testing instead (see docker-test.yml)
  #
  # cloud-test-pr:
  #   name: ‚òÅÔ∏è Cloud Test (PR)
  #   uses: ./.github/workflows/test-infrastructure.yml
  #   needs: [quick-checks, change-detection]
  #   if: |
  #     needs.change-detection.outputs.needs_cloud_test == 'true' &&
  #     github.event.pull_request.draft == false
  #   secrets: inherit
  #   with:
  #     test_type: ${{ needs.change-detection.outputs.test_type }}
  #     keep_infrastructure: false

  # Final PR status check
  pr-status:
    name: üìã PR Status
    runs-on: ubuntu-latest
    needs: [quick-checks, security-check, docs-check, change-detection]
    if: always()

    steps:
      - name: üìä Generate PR status
        run: |
          echo "## üéØ PR Validation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check individual job statuses
          QUICK_STATUS="${{ needs.quick-checks.result }}"
          SECURITY_STATUS="${{ needs.security-check.result }}"
          DOCS_STATUS="${{ needs.docs-check.result }}"

          echo "### ‚úÖ Validation Results" >> $GITHUB_STEP_SUMMARY

          if [[ "$QUICK_STATUS" == "success" ]]; then
            echo "- üöÄ **Quick Checks**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üöÄ **Quick Checks**: ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "$SECURITY_STATUS" == "success" ]]; then
            echo "- üîí **Security**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üîí **Security**: ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "$DOCS_STATUS" == "success" ]]; then
            echo "- üìö **Documentation**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üìö **Documentation**: ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Testing status
          echo "- üê≥ **Docker Testing**: Check docker-test.yml workflow for integration tests" >> $GITHUB_STEP_SUMMARY
          echo "- ‚òÅÔ∏è **Cloud Testing**: Disabled (Docker-based testing active)" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéâ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review and address any failed checks" >> $GITHUB_STEP_SUMMARY
          echo "- Wait for all workflows to complete" >> $GITHUB_STEP_SUMMARY
          echo "- Ready for merge when all checks pass! üöÄ" >> $GITHUB_STEP_SUMMARY

      - name: ‚ùå Fail if critical checks failed
        if: |
          needs.quick-checks.result == 'failure' ||
          needs.security-check.result == 'failure'
        run: |
          echo "‚ùå Critical validation checks failed!"
          echo "Please fix the issues before merging."
          exit 1